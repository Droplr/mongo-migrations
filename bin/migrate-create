#!/usr/bin/env node
"use strict";

const program = require('commander');
const path = require('path');
const dotenv = require('dotenv');
const log = require('../lib/loggers/log');
const registerCompiler = require('../lib/register-compiler');
const pkg = require('../package.json');
const configLoader = require('../lib/loaders/ConfigLoader');

program
  .version(pkg.version)
  .option('-c, --chdir [dir]', 'Change the working directory', process.cwd())
  .option('--migrations-dir <dir>', 'Change the migrations directory name')
  .option('--compiler <ext:module>', 'Use the given module to compile files')
  .option('-d, --date-format [format]', 'Set a date format to use')
  .option('-t, --template-file [filePath]', 'Set path to template file to use for new migrations')
  .option('-e, --extension [extension]', 'Use the given extension to create the file')
  .option('-g, --template-factory <name>', 'A template factory function')
  .option('--env [name]', 'Use dotenv to load an environment file')
  .option('--config <name>', 'Name of config file', 'migrate-config.json')
  .arguments('<name>')
  .action(async (name) => {
    try {
      if (!name) {
        log.error('error', 'Migration name required');
        log('usage', 'migrate create <name>');
        process.exit(1);
      }

      process.chdir(program.chdir)

      if (program.env) {
        const e = dotenv.config({
          path: typeof program.env === 'string' ? program.env : '.env',
        });
        if (e && e.error instanceof Error) throw e.error;
      }

      const CONFIG = await configLoader.load(program.config);

      const COMPILER = program.compiler || CONFIG.compiler;
      const MIGRATIONS_DIRECTORY = program.migrationsDir || CONFIG.migrationsDirectory;
      const DATE_FORMAT = program.dateFormat || CONFIG.dateFormat;
      const TEMPLATE_FACTORY_PATH = program.templateFactory || CONFIG.templateFactoryPath;
      const TEMPLATE_FILE_PATH = program.templateFile || CONFIG.templateFilePath;

      if (COMPILER) registerCompiler(COMPILER);

      const factory = require(TEMPLATE_FACTORY_PATH);

      const template = await factory
        .create(
          name,
          program.extension || path.extname(TEMPLATE_FILE_PATH),
          DATE_FORMAT,
          TEMPLATE_FILE_PATH,
          MIGRATIONS_DIRECTORY
        );
      log('create', template.filePath);
    } catch (e) {
      log.error('Template generation error', e.message);
      process.exit(1);
    }
  })
  .parse(process.argv)
