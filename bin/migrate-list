#!/usr/bin/env node
"use strict";

const program = require('commander');
const path = require('path');
const dateFormat = require('dateformat');
const minimatch = require('minimatch');
const dotenv = require('dotenv');
const migrate = require('..');
const log = require('../lib/loggers/log');
const registerCompiler = require('../lib/register-compiler');
const pkg = require('../package.json');
const configLoader = require('../lib/loaders/ConfigLoader');

program
  .version(pkg.version)
  .usage('[options] <name>')
  .option('-c, --chdir <dir>', 'Change the working directory', process.cwd())
  .option('-f, --state-file <path>', 'Set path to state file')
  .option('-s, --store <store>', 'Set the migrations store')
  .option('-d, --date-format [format]', 'Set a date format to use', 'yyyy-mm-dd')
  .option('--migrations-dir <dir>', 'Change the migrations directory name')
  .option('--matches <glob>', 'A glob pattern to filter migration files', '*')
  .option('--compiler <ext:module>', 'Use the given module to compile files')
  .option('--env [name]', 'Use dotenv to load an environment file')
  .option('--config <name>', 'Name of config file', 'migrate-config.json')
  .parse(process.argv);

(async () => {
  try {
    if (program.clean && process.env.NODE_ENV === 'production' && !program.force) {
      log.error('error', 'Cowardly refusing to clean while node environment set to production, use --force to continue.');
      process.exit(1);
    }

    process.chdir(program.chdir);

    if (program.env) {
      const e = dotenv.config({
        path: typeof program.env === 'string' ? program.env : '.env',
      })
      if (e && e.error instanceof Error) throw e.error;
    }

    const CONFIG = await configLoader.load(program.config);

    const COMPILER = program.compiler || CONFIG.compiler;
    const MIGRATIONS_DIRECTORY = program.migrationsDir || CONFIG.migrationsDirectory;
    const STATE_FILE = program.stateFile || CONFIG.stateFile;
    const DATE_FORMAT = program.dateFormat || CONFIG.dateFormat;
    const STORE_CLASS_PATH = program.store || CONFIG.storeClassPath;

    if (COMPILER) registerCompiler(COMPILER);

    const Store = require(STORE_CLASS_PATH[0] === '.'
      ? path.join(process.cwd(), STORE_CLASS_PATH)
      : STORE_CLASS_PATH);
    const store = new Store(STATE_FILE);
    const set = await migrate.load({
      config: CONFIG,
      stateStore: store,
      migrationsDirectory: MIGRATIONS_DIRECTORY,
      filterFunction: minimatch.filter(program.matches)
    });

    if (set.migrations.length === 0) return log('list', 'No Migrations');

    set.migrations.forEach((migration) => {
      log(migration.title + (migration.timestamp ? ' [' + dateFormat(migration.timestamp, DATE_FORMAT) + ']' : ' [not run]'), migration.description || '<No Description>')
    });

    process.exit(0);
  } catch (e) {
    log.error('error', e);
    process.exit(1);
  }
})();
